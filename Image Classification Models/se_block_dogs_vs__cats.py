# -*- coding: utf-8 -*-
"""SE_Block_Dogs_vs _Cats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mq5gToa4av35Lyr5NdiRIv_0xKY6uGKZ
"""

"""CNN_Dogs_VS_Cats_with_SE_Block.ipynb"""

!mkdir -p ~/.kaggle

!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense, Flatten, GlobalAveragePooling2D, Reshape, Multiply, Input, Conv2D
from keras.applications.vgg16 import VGG16
from keras.models import Model
import matplotlib.pyplot as plt

def se_block(input_tensor, ratio=16):
    """Squeeze and Excitation block"""
    channel_axis = 1 if tf.keras.backend.image_data_format() == "channels_first" else -1
    filters = input_tensor.shape[channel_axis]
    se_shape = (1, 1, filters)

    se = GlobalAveragePooling2D()(input_tensor)
    se = Reshape(se_shape)(se)
    se = Dense(filters // ratio, activation='relu', kernel_initializer='he_normal', use_bias=False)(se)
    se = Dense(filters, activation='sigmoid', kernel_initializer='he_normal', use_bias=False)(se)

    x = Multiply()([input_tensor, se])
    return x

conv_base = VGG16(
    weights='imagenet',
    include_top = False,
    input_shape=(150,150,3)
)

conv_base.trainable = True

set_trainable = False

for layer in conv_base.layers:
  if layer.name == 'block5_conv1':
    set_trainable = True
  if set_trainable:
    layer.trainable = True
  else:
    layer.trainable = False

# Add SE blocks after certain layers
for layer in conv_base.layers:
    print(layer.name, layer.trainable)

def add_se_to_vgg16(conv_base):
    input = conv_base.input
    x = input
    for layer in conv_base.layers:
        x = layer(x)
        if 'conv' in layer.name:  # Add SE block after each convolutional layer
            x = se_block(x)
    return Model(inputs=input, outputs=x)

conv_base_with_se = add_se_to_vgg16(conv_base)

conv_base_with_se.summary()

model = Sequential()

model.add(conv_base_with_se)
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# generators
train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(150,150)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/test',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(150,150)
)

# Normalize
def process(image, label):
    image = tf.cast(image / 255.0, tf.float32)
    return image, label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

model.compile(
    optimizer=keras.optimizers.RMSprop(learning_rate=1e-5),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

history = model.fit(train_ds, epochs=10, validation_data=validation_ds)

plt.plot(history.history['accuracy'], color='red', label='train')
plt.plot(history.history['val_accuracy'], color='blue', label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'], color='red', label='train')
plt.plot(history.history['val_loss'], color='blue', label='validation')
plt.legend()
plt.show()