{
    "phptools.activate.title": "Activate License",
    "phptools.requesttrial.title": "Begin Free Trial ...",
    "phptools.releasenotes.title": "About ...",
    "phptools.todo.search.title": "Search todo ...",
    "phptools.selectPhpVersion.title": "Select PHP version ...",
    "phptools.problems.scope": "Background Code Analysis",
    "phptools.selectLanguage": "PHP Manual Language ...",
    "phptools.importClass.title": "Import class ...",
    "phptools.fqnClass.title": "FQN class ...",

    "php.problems.scope.none": "Workspace won't be analysed.",
    "php.problems.scope.opened": "Only opened documents will be analyzed for problems.",
    "php.problems.scope.all": "Entire workspace will be analyzed continuously. (PREMIUM)",

    "php.workspace.shortOpenTag": "",
    "php.workspace.shortOpenTag.auto": "Enable short open tags unless there is `<?xml` tag.",
    "php.workspace.shortOpenTag.true": "Enable PHP code inside short open tags.",
    "php.workspace.shortOpenTag.false": "Disable PHP code inside short open tags.",

    "php.inlayHints.insertOnDoubleClick": "The inlay hint will be inserted to the code on double-clicking on it. Enabled by default.",
    "php.inlayHints.parameters.enabled": "Display inlay parameter names.\n```phpx\nfoo( /*name:*/ x ); \n```\n",
    "php.inlayHints.parameters.suppressNameMatchingValue": "Suppress inlay parameter name hint, when the parameter name matches the argument value.\n```phpx\n// foo( name: $name ); # suppress 'name:' because the argument looks the same\nfoo( $name );\n```\n",
    "php.inlayHints.parameters.byReference": "Display inlay `&` sign in front of arguments passed by reference.\n```phpx\nfoo( /*&*/$x ); // show '&' because '$x' is passed by reference \n```\n",
    "php.inlayHints.types.return": "Display inlay function return type inferred from the function code.\n```phpx\nfunction foo()/*: void*/ {\n```\n",
    "php.inlayHints.types.return.true": "**Enable** for all functions without a type hint",
    "php.inlayHints.types.return.false": "**Disable**",
    "php.inlayHints.types.return.named": "Only for global functions and methods. Disabled for anonymous and arrow functions.",
    "php.inlayHints.types.variable": "Display assigned variable type.\n```phpx\n$value/*: int*/ = strlen('str');\n```\n",
    "php.inlayHints.types.lambdaParameter": "Display infered lambda parameter type if possible.\n```phpx\n$collection->map(function ( /*string*/ $value) {\n```\n",
    "php.inlayHints.types.suppressVariableFromLiteral": "Suppress inlay hint for obvious variable assignments.\n```phpx\n$value/*: int*/ = 1;\n```\n",

    "phpunit.command.description": "Custom command to for running and debugging tests. Use variables `${phpunit}`, `${phpunitxml}`, `${phpunitargs}`, `${php}`, `${phpargs}`, `${cwd}`.\n\nExample:\n\n`ddev exec phpunit -c ${phpunitxml} ${phpunitargs}`",

    "capabilities.virtualWorkspaces.description": "In virtual workspaces, not all files might be loaded and resolving and finding references might be limited.",

    "php.format.codeStyle.description": "Base code formatting style. This setting is used as a default for all code formatting rules, unless overwritten with specific code formatting rules.",

    "php.format.rules.declCompactEmptyBody.description": "Transform empty body into `{}` and keep it at the same line as a previous symbol, separated by single space.\n\n```phpx\n#Enabled         #Disabled\nfunction foo(    function foo(\n    $x,              $x,\n    $y               $y\n) {}             )\n                 {\n                 }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.keepControlStatementsOnOneLine.description": "Control statements are kept on one line.\n\n```phpx\n#Enabled           #Disabled\nif ($x) return;    if ($x)\n                   \treturn;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.keepFunctionsOnOneLine.description": "Functions and methods are kept on one line.\n\n```phpx\n#Enabled                        #Disabled\nfunction foo() { return 1; }    function foo() {\n                                    return 1;\n                                }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.keepClassesOnOneLine.description": "Clasess are kept on one line.\n\n```phpx\n#Enabled       #Disabled\nclass x { }    class x {\n               }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForFunctions.description": "Place open brace `{` on a new line for methods, functions and constructors.\n\n```phpx\n#Enabled          #Disabled\nfunction foo()    function foo() {\n{                 }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForLambdas.description": "Place open brace `{` on a new line for lambda functions.\n\n```phpx\n#Enabled                 #Disabled\n$lambda = function ()    $lambda = function () {\n{                        }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForAnonymousClasses.description": "Place open brace `{` on a new line for anonymous classes.\n\n```phpx\n#Enabled                                  #Disabled\n$c = new class extends \\Foo implements    $c = new class extends \\Foo implements\n    \\ArrayAccess                              \\ArrayAccess {\n{                                         };\n};\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForTypes.description": "Place open brace `{` on a new line for types.\n\n```phpx\n#Enabled                           #Disabled\nclass X extends \\Foo implements    class X extends \\Foo implements\n    \\ArrayAccess                       \\ArrayAccess {\n{                                  }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForNamespaces.description": "Place open brace `{` on a new line for namespace declarations.\n\n```phpx\n#Enabled       #Disabled\nnamespace A    namespace A {\n{              }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.openBraceOnNewLineForBlocks.description": "Place open brace `{` on a new line for all types of code blocks, except for those controlled by other formatting rules.\n\n```phpx\n#Enabled     #Disabled\nif (true)    if (true) {\n{            }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.indentBraces.description": "Gets value indicating whether to indent braces\n\n```phpx\n#Enabled             #Disabled\nfunction foo()       function foo()\n    {                {\n    echo \"Hello\";        echo \"Hello\";\n    }                }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceAfterCast.description": "Insert a space after a cast operator.\n\n```phpx\n#Enabled            #Disabled\n$x = (int) $obj;    $x = (int)$obj;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceAfterUnaryNot.description": "Insert a space after a unary not operator.\n\n```phpx\n#Enabled        #Disabled\n$x = ! $obj;    $x = !$obj;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceAroundConcatenation.description": "Insert a space around concatenation operator.\n\n```phpx\n#Enabled               #Disabled\n$x = $str1 . $str2;    $x = $str1.$str2;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeParenthesesInArrowFunctions.description": "Insert a space before arrow function parentheses.\n\n```phpx\n#Enabled            #Disabled\n$x = fn () => 1;    $x = fn() => 1;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeParenthesesInControlStatements.description": "Insert a space before parentheses in control statements.\n\n```phpx\n#Enabled     #Disabled\nif (true)    if(true)\n{            {\n}            }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeParenthesesInCalls.description": "Insert a space before parentheses in method, function and constructor call parentheses.\n\n```phpx\n#Enabled    #Disabled\nfoo ();     foo();\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeParenthesesInDeclarations.description": "Insert a space before parentheses in method, function and constructor declaration parentheses.\n\n```phpx\n#Enabled           #Disabled\nfunction foo ()    function foo()\n{                  {\n}                  }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeColonInControlStatements.description": "Insert a space before colon in control flow blocks.\n\n```phpx\n#Enabled       #Disabled\nif (true) :    if (true):\nendif;         endif;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceBeforeColonInReturnType.description": "Insert a space before colon in a return type\n\n```phpx\n#Enabled                  #Disabled\nfunction foo() : int {    function foo(): int {\n}                         }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinCallParens.description": "Insert a space within method, function and constructor call parentheses.\n\n```phpx\n#Enabled        #Disabled\nfoo( 1, 2 );    foo(1, 2);\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinDeclParens.description": "Insert a space within method, function and constructor declaration parentheses.\n\n```phpx\n#Enabled                      #Disabled\nfunction foo( $x, $y ) { }    function foo($x, $y) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinArrayInitilizersParens.description": "Insert a space within array initializer parentheses.\n\n```phpx\n#Enabled                                      #Disabled\n$x = array( 1 => \"first\", 2 => \"second\" );    $x = array(1 => \"first\", 2 => \"second\");\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinIfParens.description": "Insert a space within `if` statement header parentheses.\n\n```phpx\n#Enabled           #Disabled\nif ( true ) { }    if (true) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinWhileParens.description": "Insert a space within `while` statement header parentheses.\n\n```phpx\n#Enabled                  #Disabled\nwhile ( $a != $b ) { }    while ($a != $b) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinForParens.description": "Insert a space within `for` statement header parentheses.\n\n```phpx\n#Enabled                              #Disabled\nfor ( $i = 0; $i < 100; $i++ ) { }    for ($i = 0; $i < 100; $i++) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinForeachParens.description": "Insert a space within `foreach` statement header parentheses.\n\n```phpx\n#Enabled                                   #Disabled\nforeach ( $expr as $key => $value ) { }    foreach ($expr as $key => $value) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinSwitchParens.description": "Insert a space within `switch` statement header parentheses.\n\n```phpx\n#Enabled             #Disabled\nswitch ( $x ) { }    switch ($x) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinCatchParens.description": "Insert a space within `catch` statement header parentheses.\n\n```phpx\n#Enabled                           #Disabled\ntry { } catch ( Exception ) { }    try { } catch (Exception) { }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinBrackets.description": "Insert a space within brackets.\n\n```phpx\n#Enabled         #Disabled\n$y = $x[ 1 ];    $y = $x[1];\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinBracketsAroundExpression.description": "Insert a space within brackets around expression.\n\n```phpx\n#Enabled              #Disabled\n$y = $x[ $i + 1 ];    $y = $x[$i + 1];\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.spaceWithinExpressionParens.description": "Insert a space within parentheses around expression.\n\n```phpx\n#Enabled           #Disabled\n$x = ( 1 + 2 );    $x = (1 + 2);\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.arrayInitializersWrap.description": "Defines wrapping behavior for array initializers.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each item is placed on a new line and properly indented if the array initializer is split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.arrayInitializersNewLineBeforeFirstElement.description": "Place a new line before the first array element when wrapping.\n\n```phpx\n#Enabled    #Disabled\n$x = [      $x = [1,\n    1,          2\n    2       ];\n];\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.arrayInitializersNewLineAfterLastElement.description": "Place a new line after the last element when wrapping.\n\n```phpx\n#Enabled    #Disabled\n$x = [      $x = [\n    1,          1,\n    2           2];\n];\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.arrayInitializersAlignKeyValuePairs.description": "Automatically align `=>` operators.\n\n```phpx\n#Enabled              #Disabled\n$x = [                $x = [\n    1    => 'foo',        1 => 'foo',\n    1234 => 'bar'         1234 => 'bar'\n];                    ];\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.callParametersWrap.description": "Defines wrapping behavior for method, function and constructor call parameters.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each item is placed on a new line and properly indented if the call arguments are split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.callParametersNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` when wrapping.\n\n```phpx\n#Enabled    #Disabled\nfoo(        foo(1,\n    1,          2\n    2       );\n);\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.callParametersNewLineBeforeRightParen.description": "Place a new line before the right closing parenthesis `)` when wrapping.\n\n```phpx\n#Enabled    #Disabled\nfoo(        foo(\n    1,          1,\n    2           2);\n);\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.declParametersWrap.description": "Defines wrapping behavior for method or function declaration parameters.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each declaration parameter is placed on a new line and properly indented if the arguments are split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.declParametersNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` of function or method declaration header when wrapping.\n\n```phpx\n#Enabled         #Disabled\nfunction foo(    function foo($x,\n    $x,              $y\n    $y           ) {\n) {              }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.declParametersNewLineBeforeRightParen.description": "Place a new line before the right closing parenthesis `)` of a function or method declaration header when wrapping.\n\n```phpx\n#Enabled         #Disabled\nfunction foo(    function foo(\n    $x,              $x,\n    $y               $y) {\n) {              }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.declKeepRightParenAndOpenBraceOnOneLine.description": "Keep the right closing parenthesis `)` of a function or method declaration header on the one line as opening brace of the body `{`.\n\n```phpx\n#Enabled         #Disabled\nfunction foo(    function foo(\n    $x,              $x,\n    $y               $y\n) {              )\n}                {\n                 }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.whileStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `while` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled       #Disabled\nwhile(         while($x == 2\n    $x == 2    ) {\n) {            }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.whileStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `while` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled       #Disabled\nwhile(         while(\n    $x == 2        $x == 2) {\n) {            }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.forStatementWrap.description": "Defines wrapping behavior for `for` statement.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each item in `for` statement is placed on a new line and properly indented if they are split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.forStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `for` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled         #Disabled\nfor(             for($i = 0;\n    $i = 0;          $i < 100;\n    $i < 100;        $i++\n    $i++         ) {\n) {              }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.forStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `for` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled         #Disabled\nfor(             for($i = 0;\n    $i = 0;          $i < 100;\n    $i < 100;        $i++\n    $i++         ) {\n) {              }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.ifStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `if` or `elseif` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled    #Disabled\nif(         if(true\n    true    ) {\n) {         }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.ifStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `if` or `elseif` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled    #Disabled\nif(         if(\n    true        true) {\n) {         }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.elseOnNewLine.description": "Place `else` on a new line.\n\n```phpx\n#Enabled     #Disabled\nif (true)    if (true)\n{            {\n}            } else\nelse         {\n{            }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.switchStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `switch` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled    #Disabled\nswitch(     switch($x\n    $x      ) {\n) {         }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.switchStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `switch` statement header if it's split across multiple lines.\n\n```phpx\n#Enabled    #Disabled\nswitch(     switch(\n    $x          $x) {\n) {         }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.catchOnNewLine.description": "Place `catch` on a new line.\n\n```phpx\n#Enabled    #Disabled\ntry         try\n{           {\n}           } catch\ncatch       {\n{           }\n}           finally\nfinally     {\n{           }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.finallyOnNewLine.description": "Place `finally` on a new line.\n\n```phpx\n#Enabled    #Disabled\ntry         try\n{           {\n}           }\ncatch       catch\n{           {\n}           } finally\nfinally     {\n{           }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.implementsListWrap.description": "Defines wrapping behavior for `implements` list in type declarations.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each interface in `implements` list is placed on a new line and properly indented if they are split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.newLineAfterImplements.description": "Place a new line after `implements` in type declaration if the list of interfaces is split across multiple lines.\n\n```phpx\n#Enabled              #Disabled\nclass X implements    class X implements A,\n    A,                    B,\n    B,                    C\n    C                 {\n{                     }\n}\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.groupUseWrap.description": "Defines wrapping behavior for group `use` list in type declarations.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each declaration in group `use` list is placed on a new line and properly indented if they are split across multiple lines.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.groupUseNewLineBeforeFirstDeclaration.description": "Place a new line before first group `use` declaration if the list of declarations is split across multiple lines.\n\n```phpx\n#Enabled               #Disabled\nuse Vendor\\pkg\\ns\\{    use Vendor\\pkg\\ns\\{ns1\\A,\n    ns1\\A,                 ns2\\B,\n    ns2\\B,             };\n};\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.alignConsecutiveAssignments.description": "Automatically align consecutive `=` assignments.\n\n```phpx\n#Enabled       #Disabled\n$a     = 1;    $a = 1;\n$bbb   = 2;    $bbb = 2;\n$ccccc = 3;    $ccccc = 3;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.alignConstants.description": "Automatically align constant declarations\n\n```phpx\n#Enabled              #Disabled\nclass X {             class X {\n    const a   = 1;        const a = 1;\n    const bb  = 2;        const bb = 2;\n    const ccc = 3;        const ccc = 3;\n}                     }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.alignEnumCases.description": "Automatically align assigned values in backed enumerations\n\n```phpx\n#Enabled             #Disabled\nenum X {             enum X {\n    case a   = 1;        case a = 1;\n    case bb  = 2;        case bb = 2;\n    case ccc = 3;        case ccc = 3;\n}                    }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.alignMatchArmBodies.description": "Automatically align the bodies (results) within `match` expression arms\n\n```phpx\n#Enabled                        #Disabled\nmatch ($day) {                  match ($day) {\n    'Monday'    => 'Work',          'Monday' => 'Work',\n    'Tuesday'   => 'Tacos',         'Tuesday' => 'Tacos',\n    'Wednesday' => 'Waffles'        'Wednesday' => 'Waffles'\n};                              };\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.addCommaAfterLastArrayElement.description": "Automatically adds a comma after the last array element if it's not on a single line.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.addCommaAfterLastCallParameter.description": "Automatically adds a comma after the last function call parameter if it's not on a single line.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.addCommaAfterLastDeclParameter.description": "Automatically adds a comma after the last function or method declaration parameter if it's not on a single line.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.booleanConstantCasing.description": "Defines casing for `true` and `false` constants.\n* `uppercase` - Changes the casing to upper case\n* `lowercase` - Changes the casing to lower case\n* `keep` - Keeps the original casing\n\n\n```phpx\n#lowercase     #uppercase\ntrue, false    TRUE, FALSE\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.nullConstantCasing.description": "Defines casing for `null` constant.\n* `uppercase` - Changes the casing to upper case\n* `lowercase` - Changes the casing to lower case\n* `keep` - Keeps the original casing\n\n\n```phpx\n#lowercase    #uppercase\nnull          NULL\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.addCommaAfterLastClosureUse.description": "Indicates whether a comma should be inserted after the last parameter in a closure use clause\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.leaveSingleLineBlock.description": "Leave single line blocks as they are\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.indentHtmlByPhpBlocks.description": "Indent HTML code by the PHP indentation.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.offsetPhpBlocks.description": "Offset PHP code based on the open tag.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.endWithNewLine.description": "Inserts final newline at the end of a file.\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.chainedMethodCallsWrap.description": "Defines wrapping behavior for chained method calls.\n* `Off` - No wrapping is applied\n* `Always` - When this option is selected each method call is placed on a new line and properly indented.\n        \n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.chainedMethodCallsSemicolonOnNewLine.description": "Place `;` on a new line after the last element in the chained method call when wrapping.\n\n```phpx\n#Enabled       #Disabled\n$x->aaa()      $x->aaa()\n    ->bbb()        ->bbb();\n;\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.removeReduntandClosingTag.description": "The closing `?>` tag should be omitted from files containing only PHP.\n\n```phpx\n#Enabled        #Disabled\n<?php           <?php\n// some code    // some code\n                ?>\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    "php.format.rules.alignProperties.description": "Automatically align properties declarations\n\n```phpx\n#Enabled                   #Disabled\nclass X {                  class X {\n    var       $a   = 1;        var $a = 1;\n    public    $bb  = 2;        public $bb = 2;\n    protected $ccc = 3;        protected $ccc = 3;\n}                          }\n```\n\nRequires [`PREMIUM`](command:phptools.activatewindow)",
    
    "_inherit": "Inherit",
    "_normal": "Normal",
    "_onEveryItem": "On every item",
    "_always": "Always",
    "_off": "Off",

    "_uppercase": "UpperCase",
    "_lowercase": "LowerCase",
    "_keep": "Keep",

    "_wrap.inherit.description": "Setting is inherited from base formatting style `php.format.codeStyle`",
    "_wrap.off.description" : "No wrapping is applied.",
    "_wrap.normal.description" : "(currently not supported)",
    "_wrap.onEveryItem.description" : "Each item is placed on a new line and properly indented if the call arguments are split across multiple lines.",
    "_wrap.always.description": "Each item is placed on a new line and properly indented."
}
